{"id":"node_modules/rxjs/_esm5/internal/operators/mergeAll.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/mergeAll.js.map","includedInParent":true,"mtime":1682941429233},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/src/internal/operators/mergeAll.ts","includedInParent":true,"mtime":1682941429233},{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/package.json","includedInParent":true,"mtime":1682941429233},{"name":"./mergeMap","loc":{"line":2,"column":25,"index":93},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/mergeAll.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/mergeMap.js"},{"name":"../util/identity","loc":{"line":3,"column":25,"index":132},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/mergeAll.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/util/identity.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeAll = mergeAll;\nvar _mergeMap = require(\"./mergeMap\");\nvar _identity = require(\"../util/identity\");\n/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\n\nfunction mergeAll(concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  return (0, _mergeMap.mergeMap)(_identity.identity, concurrent);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":11,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":11,"column":9}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":11,"column":17}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":11,"column":18}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":11,"column":28}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":11,"column":30}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":12,"column":2}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":12,"column":6}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":12,"column":16}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":18},"generated":{"line":12,"column":21}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":26},"generated":{"line":12,"column":26}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":26},"generated":{"line":12,"column":27}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":28},"generated":{"line":12,"column":29}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":13,"column":4}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":13,"column":14}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":13,"column":17}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":13,"column":23}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":13,"column":24}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":13,"column":41}}],"sources":{"../../../src/internal/operators/mergeAll.ts":"\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { take, map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<ObservableInput<T>, T> {\n  return mergeMap(identity, concurrent);\n}\n"},"lineCount":null}},"error":null,"hash":"785506a60b0dfd797c8757019024f2ae","cacheData":{"env":{}}}