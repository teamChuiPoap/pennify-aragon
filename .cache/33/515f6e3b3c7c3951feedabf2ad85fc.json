{"id":"node_modules/@safe-global/safe-apps-sdk/dist/src/eth/index.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/eth/index.js.map","includedInParent":true,"mtime":1682941409327},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/src/eth/index.ts","includedInParent":true,"mtime":1682941409327},{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/package.json","includedInParent":true,"mtime":1682941409327},{"name":"../eth/constants","loc":{"line":4,"column":28,"index":127},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/eth/index.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/eth/constants.js"},{"name":"../communication/methods","loc":{"line":5,"column":26,"index":174},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/eth/index.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/communication/methods.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Eth = void 0;\nconst constants_1 = require(\"../eth/constants\");\nconst methods_1 = require(\"../communication/methods\");\nconst inputFormatters = {\n    defaultBlockParam: (arg = 'latest') => arg,\n    returnFullTxObjectParam: (arg = false) => arg,\n    blockNumberToHex: (arg) => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg,\n};\nclass Eth {\n    constructor(communicator) {\n        this.communicator = communicator;\n        this.call = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_call,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getBalance = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBalance,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getCode = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getCode,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getStorageAt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getStorageAt,\n            formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n        });\n        this.getPastLogs = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getLogs,\n        });\n        this.getBlockByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByHash,\n            formatters: [null, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getBlockByNumber = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n            formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getTransactionByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionByHash,\n        });\n        this.getTransactionReceipt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionReceipt,\n        });\n        this.getTransactionCount = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionCount,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getGasPrice = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_gasPrice,\n        });\n        this.getEstimateGas = (transaction) => this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_estimateGas,\n        })([transaction]);\n    }\n    buildRequest(args) {\n        const { call, formatters } = args;\n        return async (params) => {\n            if (formatters && Array.isArray(params)) {\n                formatters.forEach((formatter, i) => {\n                    if (formatter) {\n                        params[i] = formatter(params[i]);\n                    }\n                });\n            }\n            const payload = {\n                call,\n                params: params || [],\n            };\n            const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n            return response.data;\n        };\n    }\n}\nexports.Eth = Eth;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/eth/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { RPC_CALLS } from '../eth/constants';\nimport {\n  BlockNumberArg,\n  RpcCallNames,\n  Communicator,\n  Log,\n  BlockTransactionString,\n  BlockTransactionObject,\n  Web3TransactionObject,\n  RPCPayload,\n  TransactionConfig,\n  Web3TransactionReceiptObject,\n  PastLogsOptions,\n} from '../types';\nimport { Methods } from '../communication/methods';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Formatter = (arg: any) => any;\n\nconst inputFormatters: Record<string, Formatter> = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false): boolean => arg,\n  blockNumberToHex: (arg: BlockNumberArg): string =>\n    Number.isInteger(arg) ? `0x${arg.toString(16)}` : (arg as string),\n};\n\ntype BuildRequestArgs = {\n  call: RpcCallNames;\n  formatters?: (Formatter | null)[];\n};\n\nclass Eth {\n  public call;\n  public getBalance;\n  public getCode;\n  public getStorageAt;\n  public getPastLogs;\n  public getBlockByHash;\n  public getBlockByNumber;\n  public getTransactionByHash;\n  public getTransactionReceipt;\n  public getTransactionCount;\n  public getGasPrice;\n  public getEstimateGas;\n\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest<[TransactionConfig, string?], string>({\n      call: RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getBalance = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getCode = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getStorageAt = this.buildRequest<[string, number, string?], string>({\n      call: RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n    });\n    this.getPastLogs = this.buildRequest<[PastLogsOptions], Log[]>({\n      call: RPC_CALLS.eth_getLogs,\n    });\n    this.getBlockByHash = this.buildRequest<[string, boolean?], BlockTransactionString | BlockTransactionObject>({\n      call: RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getBlockByNumber = this.buildRequest<\n      [BlockNumberArg, boolean?],\n      BlockTransactionString | BlockTransactionObject\n    >({\n      call: RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getTransactionByHash = this.buildRequest<[string], Web3TransactionObject>({\n      call: RPC_CALLS.eth_getTransactionByHash,\n    });\n    this.getTransactionReceipt = this.buildRequest<[string], Web3TransactionReceiptObject>({\n      call: RPC_CALLS.eth_getTransactionReceipt,\n    });\n    this.getTransactionCount = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getGasPrice = this.buildRequest<never[], string>({\n      call: RPC_CALLS.eth_gasPrice,\n    });\n    this.getEstimateGas = (transaction: TransactionConfig): Promise<number> =>\n      this.buildRequest<[TransactionConfig], number>({\n        call: RPC_CALLS.eth_estimateGas,\n      })([transaction]);\n  }\n\n  private buildRequest<P = never[], R = unknown>(args: BuildRequestArgs) {\n    const { call, formatters } = args;\n\n    return async (params?: P): Promise<R> => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter: ((...args: unknown[]) => unknown) | null, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload: RPCPayload<P> = {\n        call,\n        params: params || [],\n      };\n\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<P>, R>(Methods.rpcCall, payload);\n\n      return response.data;\n    };\n  }\n}\n\nexport { Eth };\n"]}},"error":null,"hash":"438c2e02dc7a3ac8e0474a08857b8120","cacheData":{"env":{}}}