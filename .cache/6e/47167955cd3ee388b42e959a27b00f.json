{"id":"node_modules/@safe-global/safe-apps-sdk/dist/src/txs/index.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/txs/index.js.map","includedInParent":true,"mtime":1682941409327},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/src/txs/index.ts","includedInParent":true,"mtime":1682941409327},{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/package.json","includedInParent":true,"mtime":1682941409327},{"name":"../communication/methods","loc":{"line":4,"column":26,"index":125},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/txs/index.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/communication/methods.js"},{"name":"../types","loc":{"line":5,"column":24,"index":178},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/txs/index.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@safe-global/safe-apps-sdk/dist/src/types/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TXs = void 0;\nconst methods_1 = require(\"../communication/methods\");\nconst types_1 = require(\"../types\");\nclass TXs {\n    constructor(communicator) {\n        this.communicator = communicator;\n    }\n    async getBySafeTxHash(safeTxHash) {\n        if (!safeTxHash) {\n            throw new Error('Invalid safeTxHash');\n        }\n        const response = await this.communicator.send(methods_1.Methods.getTxBySafeTxHash, { safeTxHash });\n        return response.data;\n    }\n    async signMessage(message) {\n        const messagePayload = {\n            message,\n        };\n        const response = await this.communicator.send(methods_1.Methods.signMessage, messagePayload);\n        return response.data;\n    }\n    async signTypedMessage(typedData) {\n        if (!(0, types_1.isObjectEIP712TypedData)(typedData)) {\n            throw new Error('Invalid typed data');\n        }\n        const response = await this.communicator.send(methods_1.Methods.signTypedMessage, { typedData });\n        return response.data;\n    }\n    async send({ txs, params }) {\n        if (!txs || !txs.length) {\n            throw new Error('No transactions were passed');\n        }\n        const messagePayload = {\n            txs,\n            params,\n        };\n        const response = await this.communicator.send(methods_1.Methods.sendTransactions, messagePayload);\n        return response.data;\n    }\n}\nexports.TXs = TXs;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/txs/index.ts"],"names":[],"mappings":";;;AAAA,sDAAmD;AACnD,oCAUkB;AAElB,MAAM,GAAG;IAGP,YAAY,YAA0B;QACpC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,UAAkB;QACtC,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAI3C,iBAAO,CAAC,iBAAiB,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;QAE7C,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAe;QAC/B,MAAM,cAAc,GAAG;YACrB,OAAO;SACR,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAC3C,iBAAO,CAAC,WAAW,EACnB,cAAc,CACf,CAAC;QAEF,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,SAA0B;QAC/C,IAAI,CAAC,IAAA,+BAAuB,EAAC,SAAS,CAAC,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAI3C,iBAAO,CAAC,gBAAgB,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QAE3C,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,MAAM,EAA0B;QAChD,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAChD;QAED,MAAM,cAAc,GAAG;YACrB,GAAG;YACH,MAAM;SACP,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAI3C,iBAAO,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;QAE5C,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;CACF;AAEQ,kBAAG","sourcesContent":["import { Methods } from '../communication/methods';\nimport {\n  GatewayTransactionDetails,\n  SignMessageParams,\n  SendTransactionsParams,\n  GetTxBySafeTxHashParams,\n  Communicator,\n  SendTransactionsResponse,\n  SignTypedMessageParams,\n  EIP712TypedData,\n  isObjectEIP712TypedData,\n} from '../types';\n\nclass TXs {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getBySafeTxHash(safeTxHash: string): Promise<GatewayTransactionDetails> {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n\n    const response = await this.communicator.send<\n      Methods.getTxBySafeTxHash,\n      GetTxBySafeTxHashParams,\n      GatewayTransactionDetails\n    >(Methods.getTxBySafeTxHash, { safeTxHash });\n\n    return response.data;\n  }\n\n  async signMessage(message: string): Promise<SendTransactionsResponse> {\n    const messagePayload = {\n      message,\n    };\n\n    const response = await this.communicator.send<Methods.signMessage, SignMessageParams, SendTransactionsResponse>(\n      Methods.signMessage,\n      messagePayload,\n    );\n\n    return response.data;\n  }\n\n  async signTypedMessage(typedData: EIP712TypedData): Promise<SendTransactionsResponse> {\n    if (!isObjectEIP712TypedData(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n\n    const response = await this.communicator.send<\n      Methods.signTypedMessage,\n      SignTypedMessageParams,\n      SendTransactionsResponse\n    >(Methods.signTypedMessage, { typedData });\n\n    return response.data;\n  }\n\n  async send({ txs, params }: SendTransactionsParams): Promise<SendTransactionsResponse> {\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n\n    const messagePayload = {\n      txs,\n      params,\n    };\n\n    const response = await this.communicator.send<\n      Methods.sendTransactions,\n      SendTransactionsParams,\n      SendTransactionsResponse\n    >(Methods.sendTransactions, messagePayload);\n\n    return response.data;\n  }\n}\n\nexport { TXs };\n"]}},"error":null,"hash":"b9ecb19e959aede13a22a17cd8a5ff6e","cacheData":{"env":{}}}