{"id":"node_modules/@1hive/radspec/dist/helpers/tokenAmount.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/tokenAmount.js.map","includedInParent":true,"mtime":1682941398899},{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/package.json","includedInParent":true,"mtime":1682941398899},{"name":"ethers","loc":{"line":1,"column":111,"index":111},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/tokenAmount.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/ethers/lib.esm/index.js"},{"name":"./lib/token","loc":{"line":1,"column":136,"index":136},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/tokenAmount.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/lib/token.js"},{"name":"./lib/formatBN","loc":{"line":1,"column":169,"index":169},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/tokenAmount.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/lib/formatBN.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var _ethers=require(\"ethers\"),_token=require(\"./lib/token\"),_formatBN=require(\"./lib/formatBN\"),_default=provider=>/**\n   * Format token amounts taking decimals into account\n   *\n   * @param {string} tokenAddress The address of the token\n   * @param {*} amount The absolute amount for the token quantity (wei)\n   * @param {bool} showSymbol Whether the token symbol will be printed after the amount\n   * @param {*} precision The number of decimal places to format to. If set, the precision is always enforced.\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */async function(tokenAddress,amount){let showSymbol=!(2<arguments.length&&arguments[2]!==void 0)||arguments[2],precision=3<arguments.length?arguments[3]:void 0;const amountBn=_ethers.BigNumber.from(amount),fixed=!!precision;let decimals,symbol;if(tokenAddress===_token.ETH)decimals=_ethers.BigNumber.from(18),showSymbol&&(symbol=\"ETH\");else{let token=new _ethers.Contract(tokenAddress,_token.ERC20_SYMBOL_DECIMALS_ABI,provider);if(decimals=_ethers.BigNumber.from(await token.decimals()),showSymbol)try{symbol=(await token.symbol())||\"\"}catch(err){token=new _ethers.Contract(tokenAddress,_token.ERC20_SYMBOL_BYTES32_ABI,provider),symbol=(await token.symbol())||\"\",symbol=symbol&&_ethers.utils.toUtf8String(symbol)}}precision=precision||decimals;const formattedAmount=(0,_formatBN.formatBN)(amountBn,(0,_formatBN.tenPow)(decimals),+precision,fixed);return{type:\"string\",value:showSymbol?`${formattedAmount} ${symbol}`:formattedAmount}};exports.default=_default;\n"},"sourceMaps":{"js":{"version":3,"sources":["../../src/helpers/tokenAmount.js"],"names":["provider","tokenAddress","amount","showSymbol","precision","amountBn","BigNumber","from","fixed","decimals","symbol","ETH","token","Contract","ERC20_SYMBOL_DECIMALS_ABI","err","ERC20_SYMBOL_BYTES32_ABI","ethersUtils","toUtf8String","formattedAmount","type","value"],"mappings":"oMASgBA,QAAD,EACb;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACE,eAAOC,YAAP,CAAqBC,MAArB,CAA8D,IAAjCC,CAAAA,UAAiC,4DAAdC,SAAc,6CACtDC,CAAAA,QAAQ,CAAGC,kBAAUC,IAAV,CAAeL,MAAf,CAD2C,CAEtDM,KAAK,CAAG,CAAC,CAACJ,SAF4C,IAIxDK,CAAAA,QAJwD,CAKxDC,MALwD,CAO5D,GAAIT,YAAY,GAAKU,UAArB,CACEF,QAAQ,CAAGH,kBAAUC,IAAV,CAAe,EAAf,CADb,CAEMJ,UAFN,GAGIO,MAAM,CAAG,KAHb,MAKO,CACL,GAAIE,CAAAA,KAAK,CAAG,GAAIC,iBAAJ,CACVZ,YADU,CAEVa,gCAFU,CAGVd,QAHU,CAAZ,CAOA,GADAS,QAAQ,CAAGH,kBAAUC,IAAV,CAAe,KAAMK,CAAAA,KAAK,CAACH,QAAN,EAArB,CACX,CAAIN,UAAJ,CACE,GAAI,CACFO,MAAM,CAAG,CAAC,KAAME,CAAAA,KAAK,CAACF,MAAN,EAAP,GAA0B,EACpC,CAAC,MAAOK,GAAP,CAAY,CAEZH,KAAK,CAAG,GAAIC,iBAAJ,CACNZ,YADM,CAENe,+BAFM,CAGNhB,QAHM,CAFI,CAOZU,MAAM,CAAG,CAAC,KAAME,CAAAA,KAAK,CAACF,MAAN,EAAP,GAA0B,EAPvB,CAQZA,MAAM,CAAGA,MAAM,EAAIO,cAAYC,YAAZ,CAAyBR,MAAzB,CACpB,CAEJ,CAEDN,SAAS,CAAGA,SAAS,EAAIK,QApCmC,CAsC5D,KAAMU,CAAAA,eAAe,CAAG,uBACtBd,QADsB,CAEtB,qBAAOI,QAAP,CAFsB,EAGfL,SAHe,CAItBI,KAJsB,CAAxB,CAOA,MAAO,CACLY,IAAI,CAAE,QADD,CAELC,KAAK,CAAElB,UAAU,CAAI,GAAEgB,eAAgB,IAAGT,MAAO,EAAhC,CAAoCS,eAFhD,CAIR,C","sourcesContent":["import { BigNumber, Contract, utils as ethersUtils } from 'ethers'\n\nimport {\n  ERC20_SYMBOL_BYTES32_ABI,\n  ERC20_SYMBOL_DECIMALS_ABI,\n  ETH\n} from './lib/token'\nimport { formatBN, tenPow } from './lib/formatBN'\n\nexport default (provider) =>\n  /**\n   * Format token amounts taking decimals into account\n   *\n   * @param {string} tokenAddress The address of the token\n   * @param {*} amount The absolute amount for the token quantity (wei)\n   * @param {bool} showSymbol Whether the token symbol will be printed after the amount\n   * @param {*} precision The number of decimal places to format to. If set, the precision is always enforced.\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  async (tokenAddress, amount, showSymbol = true, precision) => {\n    const amountBn = BigNumber.from(amount)\n    const fixed = !!precision\n\n    let decimals\n    let symbol\n\n    if (tokenAddress === ETH) {\n      decimals = BigNumber.from(18)\n      if (showSymbol) {\n        symbol = 'ETH'\n      }\n    } else {\n      let token = new Contract(\n        tokenAddress,\n        ERC20_SYMBOL_DECIMALS_ABI,\n        provider\n      )\n\n      decimals = BigNumber.from(await token.decimals())\n      if (showSymbol) {\n        try {\n          symbol = (await token.symbol()) || ''\n        } catch (err) {\n          // Some tokens (e.g. DS-Token) use bytes32 for their symbol()\n          token = new Contract(\n            tokenAddress,\n            ERC20_SYMBOL_BYTES32_ABI,\n            provider\n          )\n          symbol = (await token.symbol()) || ''\n          symbol = symbol && ethersUtils.toUtf8String(symbol)\n        }\n      }\n    }\n\n    precision = precision || decimals\n\n    const formattedAmount = formatBN(\n      amountBn,\n      tenPow(decimals),\n      Number(precision),\n      fixed\n    )\n\n    return {\n      type: 'string',\n      value: showSymbol ? `${formattedAmount} ${symbol}` : formattedAmount\n    }\n  }\n"],"file":"tokenAmount.js"}},"error":null,"hash":"d558bcddccb70df8f4c9ce271813f0af","cacheData":{"env":{}}}