{"id":"node_modules/@1hive/radspec/dist/helpers/fromHex.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/fromHex.js.map","includedInParent":true,"mtime":1682941398899},{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/package.json","includedInParent":true,"mtime":1682941398899},{"name":"ethers","loc":{"line":1,"column":111,"index":111},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/fromHex.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/ethers/lib.esm/index.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var _ethers=require(\"ethers\"),_default=()=>/**\n   * Returns the string representation of a given hex value\n   *\n   * @param {string} hex The hex string\n   * @param {string} [to='utf8'] The type to convert the hex from (supported types: 'utf8', 'number')\n   * @return {radspec/evaluator/TypedValue}\n   */function(hex){let to=1<arguments.length&&arguments[1]!==void 0?arguments[1]:\"utf8\";return{type:\"string\",value:\"number\"===to?_ethers.BigNumber.from(hex).toNumber():_ethers.utils.toUtf8String(hex)}};exports.default=_default;\n"},"sourceMaps":{"js":{"version":3,"sources":["../../src/helpers/fromHex.js"],"names":["hex","to","type","value","BigNumber","from","toNumber","ethersUtils","toUtf8String"],"mappings":"kIAEe,IACb;AACF;AACA;AACA;AACA;AACA;AACA,KACE,SAACA,GAAD,KAAMC,CAAAA,EAAN,wDAAW,MAAX,OAAuB,CACrBC,IAAI,CAAE,QADe,CAErBC,KAAK,CACI,QAAP,GAAAF,EAAE,CACEG,kBAAUC,IAAV,CAAeL,GAAf,EAAoBM,QAApB,EADF,CAEEC,cAAYC,YAAZ,CAAyBR,GAAzB,CALe,CAAvB,C","sourcesContent":["import { BigNumber, utils as ethersUtils } from 'ethers'\n\nexport default () =>\n  /**\n   * Returns the string representation of a given hex value\n   *\n   * @param {string} hex The hex string\n   * @param {string} [to='utf8'] The type to convert the hex from (supported types: 'utf8', 'number')\n   * @return {radspec/evaluator/TypedValue}\n   */\n  (hex, to = 'utf8') => ({\n    type: 'string',\n    value:\n      to === 'number'\n        ? BigNumber.from(hex).toNumber()\n        : ethersUtils.toUtf8String(hex)\n  })\n"],"file":"fromHex.js"}},"error":null,"hash":"13035da2912988899ac75cea6aa6839e","cacheData":{"env":{}}}