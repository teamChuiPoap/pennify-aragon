{"id":"node_modules/@1hive/radspec/dist/helpers/lib/formatBN.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/lib/formatBN.js.map","includedInParent":true,"mtime":1682941398899},{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/package.json","includedInParent":true,"mtime":1682941398899},{"name":"ethers","loc":{"line":1,"column":33,"index":33},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/@1hive/radspec/dist/helpers/lib/formatBN.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/ethers/lib.esm/index.js"}],"generated":{"js":"\"use strict\";var _ethers=require(\"ethers\");Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.tenPow=exports.formatBN=void 0;function sameFraction(first,second){// Check that these two values are the same.\n// Note that leading zeros ARE meaningful, and so we do the comparision after\n// appending a one as the first digit.\n//\n// For example, .001 and .00100 are the same value, but .0001 and .001 are not.\nreturn first=first.replace(/0+$/,\"\"),second=second.replace(/0+$/,\"\"),_ethers.BigNumber.from(`1${first}`).eq(_ethers.BigNumber.from(`1${second}`))}const tenPow=x=>_ethers.BigNumber.from(10).pow(_ethers.BigNumber.from(x));exports.tenPow=tenPow;const formatBN=function(amount,base,precision){let fixed=!!(3<arguments.length&&arguments[3]!==void 0)&&arguments[3];// Inspired by: https://github.com/ethjs/ethjs-unit/blob/35d870eae1c32c652da88837a71e252a63a83ebb/src/index.js#L83\nconst baseLength=base.toString().length,whole=amount.div(base).toString();let fraction=amount.mod(base).toString();const zeros=\"0\".repeat(Math.max(0,baseLength-fraction.length-1));fraction=`${zeros}${fraction}`;const fractionWithoutTrailingZeros=fraction.replace(/0+$/,\"\"),fractionAfterPrecision=(fixed?fraction:fractionWithoutTrailingZeros).slice(0,precision);if(!fixed&&(\"\"===fractionAfterPrecision||0===parseInt(fractionAfterPrecision,10)))return whole;const prefix=sameFraction(fractionAfterPrecision,fraction)?\"\":\"~\";return`${prefix}${whole}.${fractionAfterPrecision}`};exports.formatBN=formatBN;\n"},"sourceMaps":{"js":{"version":3,"sources":["../../../src/helpers/lib/formatBN.js"],"names":["sameFraction","first","second","replace","BigNumber","from","eq","tenPow","x","pow","formatBN","amount","base","precision","fixed","baseLength","toString","length","whole","div","fraction","mod","zeros","repeat","Math","max","fractionWithoutTrailingZeros","fractionAfterPrecision","slice","parseInt","prefix"],"mappings":"aAAA,8B,8FAEA,QAASA,CAAAA,YAAT,CAAuBC,KAAvB,CAA8BC,MAA9B,CAAsC,CAKpC;AACA;AACA;AACA;AACA;AACA,MARAD,CAAAA,KAAK,CAAGA,KAAK,CAACE,OAAN,CAAc,KAAd,CAAqB,EAArB,CAQR,CAPAD,MAAM,CAAGA,MAAM,CAACC,OAAP,CAAe,KAAf,CAAsB,EAAtB,CAOT,CAAOC,kBAAUC,IAAV,CAAgB,IAAGJ,KAAM,EAAzB,EAA4BK,EAA5B,CAA+BF,kBAAUC,IAAV,CAAgB,IAAGH,MAAO,EAA1B,CAA/B,CACR,CAEM,KAAMK,CAAAA,MAAM,CAAIC,CAAD,EAAOJ,kBAAUC,IAAV,CAAe,EAAf,EAAmBI,GAAnB,CAAuBL,kBAAUC,IAAV,CAAeG,CAAf,CAAvB,CAAtB,C,sBAEA,KAAME,CAAAA,QAAQ,CAAG,SAACC,MAAD,CAASC,IAAT,CAAeC,SAAf,CAA4C,IAAlBC,CAAAA,KAAkB,6DAClE;AADkE,KAE5DC,CAAAA,UAAU,CAAGH,IAAI,CAACI,QAAL,GAAgBC,MAF+B,CAI5DC,KAAK,CAAGP,MAAM,CAACQ,GAAP,CAAWP,IAAX,EAAiBI,QAAjB,EAJoD,CAKlE,GAAII,CAAAA,QAAQ,CAAGT,MAAM,CAACU,GAAP,CAAWT,IAAX,EAAiBI,QAAjB,EAAf,CACA,KAAMM,CAAAA,KAAK,CAAG,IAAIC,MAAJ,CAAWC,IAAI,CAACC,GAAL,CAAS,CAAT,CAAYV,UAAU,CAAGK,QAAQ,CAACH,MAAtB,CAA+B,CAA3C,CAAX,CAAd,CAEAG,QAAQ,CAAI,GAAEE,KAAM,GAAEF,QAAS,EARmC,MAS5DM,CAAAA,4BAA4B,CAAGN,QAAQ,CAACjB,OAAT,CAAiB,KAAjB,CAAwB,EAAxB,CAT6B,CAU5DwB,sBAAsB,CAAG,CAACb,KAAK,CACjCM,QADiC,CAEjCM,4BAF2B,EAG7BE,KAH6B,CAGvB,CAHuB,CAGpBf,SAHoB,CAVmC,CAelE,GACE,CAACC,KAAD,GAC4B,EAA3B,GAAAa,sBAAsB,EACoB,CAAzC,GAAAE,QAAQ,CAACF,sBAAD,CAAyB,EAAzB,CAFV,CADF,CAKE,MAAOT,CAAAA,KAAP,CAGF,KAAMY,CAAAA,MAAM,CAAG9B,YAAY,CAAC2B,sBAAD,CAAyBP,QAAzB,CAAZ,CAAiD,EAAjD,CAAsD,GAArE,CAEA,MAAQ,GAAEU,MAAO,GAAEZ,KAAM,IAAGS,sBAAuB,EACpD,CA1BM,C","sourcesContent":["import { BigNumber } from 'ethers'\n\nfunction sameFraction (first, second) {\n  // First remove any trailing zeros, since they're meaningless in fractions\n  first = first.replace(/0+$/, '')\n  second = second.replace(/0+$/, '')\n\n  // Check that these two values are the same.\n  // Note that leading zeros ARE meaningful, and so we do the comparision after\n  // appending a one as the first digit.\n  //\n  // For example, .001 and .00100 are the same value, but .0001 and .001 are not.\n  return BigNumber.from(`1${first}`).eq(BigNumber.from(`1${second}`))\n}\n\nexport const tenPow = (x) => BigNumber.from(10).pow(BigNumber.from(x))\n\nexport const formatBN = (amount, base, precision, fixed = false) => {\n  // Inspired by: https://github.com/ethjs/ethjs-unit/blob/35d870eae1c32c652da88837a71e252a63a83ebb/src/index.js#L83\n  const baseLength = base.toString().length\n\n  const whole = amount.div(base).toString()\n  let fraction = amount.mod(base).toString()\n  const zeros = '0'.repeat(Math.max(0, baseLength - fraction.length - 1))\n\n  fraction = `${zeros}${fraction}`\n  const fractionWithoutTrailingZeros = fraction.replace(/0+$/, '')\n  const fractionAfterPrecision = (fixed\n    ? fraction\n    : fractionWithoutTrailingZeros\n  ).slice(0, precision)\n\n  if (\n    !fixed &&\n    (fractionAfterPrecision === '' ||\n      parseInt(fractionAfterPrecision, 10) === 0)\n  ) {\n    return whole\n  }\n\n  const prefix = sameFraction(fractionAfterPrecision, fraction) ? '' : '~'\n\n  return `${prefix}${whole}.${fractionAfterPrecision}`\n}\n"],"file":"formatBN.js"}},"error":null,"hash":"7a3722f4316281fb3ad9bdf9a19f0f36","cacheData":{"env":{}}}