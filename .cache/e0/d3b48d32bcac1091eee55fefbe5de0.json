{"id":"node_modules/rxjs/_esm5/internal/operators/share.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/share.js.map","includedInParent":true,"mtime":1682941429233},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/src/internal/operators/share.ts","includedInParent":true,"mtime":1682941429233},{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/package.json","includedInParent":true,"mtime":1682941429233},{"name":"./multicast","loc":{"line":2,"column":26,"index":99},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/share.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/multicast.js"},{"name":"./refCount","loc":{"line":3,"column":25,"index":139},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/share.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/refCount.js"},{"name":"../Subject","loc":{"line":4,"column":24,"index":177},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/share.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/Subject.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.share = share;\nvar _multicast = require(\"./multicast\");\nvar _refCount = require(\"./refCount\");\nvar _Subject = require(\"../Subject\");\n/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */\n\nfunction shareSubjectFactory() {\n  return new _Subject.Subject();\n}\nfunction share() {\n  return function (source) {\n    return (0, _refCount.refCount)()((0, _multicast.multicast)(shareSubjectFactory)(source));\n  };\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":9,"column":2},"generated":{"line":12,"column":9}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":9,"column":23},"generated":{"line":12,"column":28}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":9,"column":23},"generated":{"line":12,"column":31}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":10,"column":1},"generated":{"line":13,"column":2}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":10,"column":1},"generated":{"line":13,"column":9}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":10,"column":1},"generated":{"line":13,"column":13}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":10,"column":1},"generated":{"line":13,"column":29}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":10,"column":1},"generated":{"line":13,"column":31}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":15,"column":0}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":25,"column":9},"generated":{"line":15,"column":9}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":15,"column":14}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":25,"column":10},"generated":{"line":15,"column":17}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":16,"column":2}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":16,"column":9}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":16,"column":19}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":16,"column":25}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":16,"column":27}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":4}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":11}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":15}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":33}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":36}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":37}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":41}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":61}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":63}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":82}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":83}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":84}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":90}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":91}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":17,"column":92}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":18,"column":2}},{"source":"../../../src/internal/operators/share.ts","name":null,"original":{"line":26,"column":1},"generated":{"line":18,"column":3}}],"sources":{"../../../src/internal/operators/share.ts":"import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../types';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * ![](share.png)\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n}\n"},"lineCount":null}},"error":null,"hash":"2de6370555822c00165d253394bf4313","cacheData":{"env":{}}}