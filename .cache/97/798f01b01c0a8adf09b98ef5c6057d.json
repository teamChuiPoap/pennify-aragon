{"id":"node_modules/jsonify/lib/stringify.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/jsonify/package.json","includedInParent":true,"mtime":1682941447287}],"generated":{"js":"'use strict';\n\nvar escapable = /[\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = { // table of character substitutions\n\t'\\b': '\\\\b',\n\t'\\t': '\\\\t',\n\t'\\n': '\\\\n',\n\t'\\f': '\\\\f',\n\t'\\r': '\\\\r',\n\t'\"': '\\\\\"',\n\t'\\\\': '\\\\\\\\'\n};\nvar rep;\n\nfunction quote(string) {\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape sequences.\n\n\tescapable.lastIndex = 0;\n\treturn escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t\tvar c = meta[a];\n\t\treturn typeof c === 'string' ? c\n\t\t\t: '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t}) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n\t// Produce a string from holder[key].\n\tvar i; // The loop counter.\n\tvar k; // The member key.\n\tvar v; // The member value.\n\tvar length;\n\tvar mind = gap;\n\tvar partial;\n\tvar value = holder[key];\n\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\tif (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n\t\tvalue = value.toJSON(key);\n\t}\n\n\t// If we were called with a replacer function, then call the replacer to obtain a replacement value.\n\tif (typeof rep === 'function') {\n\t\tvalue = rep.call(holder, key, value);\n\t}\n\n\t// What happens next depends on the value's type.\n\tswitch (typeof value) {\n\t\tcase 'string':\n\t\t\treturn quote(value);\n\n\t\tcase 'number':\n\t\t\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\t\treturn isFinite(value) ? String(value) : 'null';\n\n\t\tcase 'boolean':\n\t\tcase 'null':\n\t\t\t// If the value is a boolean or null, convert it to a string. Note:\n\t\t\t// typeof null does not produce 'null'. The case is included here in\n\t\t\t// the remote chance that this gets fixed someday.\n\t\t\treturn String(value);\n\n\t\tcase 'object':\n\t\t\tif (!value) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tgap += indent;\n\t\t\tpartial = [];\n\n\t\t\t// Array.isArray\n\t\t\tif (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\t\t\tlength = value.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tpartial[i] = str(i, value) || 'null';\n\t\t\t\t}\n\n\t\t\t\t// Join all of the elements together, separated with commas, and wrap them in brackets.\n\t\t\t\tv = partial.length === 0 ? '[]' : gap\n\t\t\t\t\t? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n\t\t\t\t\t: '[' + partial.join(',') + ']';\n\t\t\t\tgap = mind;\n\t\t\t\treturn v;\n\t\t\t}\n\n\t\t\t// If the replacer is an array, use it to select the members to be stringified.\n\t\t\tif (rep && typeof rep === 'object') {\n\t\t\t\tlength = rep.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tk = rep[i];\n\t\t\t\t\tif (typeof k === 'string') {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise, iterate through all of the keys in the object.\n\t\t\t\tfor (k in value) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, k)) {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Join all of the member texts together, separated with commas, and wrap them in braces.\n\n\t\t\tv = partial.length === 0 ? '{}' : gap\n\t\t\t\t? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n\t\t\t\t: '{' + partial.join(',') + '}';\n\t\t\tgap = mind;\n\t\t\treturn v;\n\t\tdefault:\n\t}\n}\n\nmodule.exports = function (value, replacer, space) {\n\tvar i;\n\tgap = '';\n\tindent = '';\n\n\t// If the space parameter is a number, make an indent string containing that many spaces.\n\tif (typeof space === 'number') {\n\t\tfor (i = 0; i < space; i += 1) {\n\t\t\tindent += ' ';\n\t\t}\n\t} else if (typeof space === 'string') {\n\t\t// If the space parameter is a string, it will be used as the indent string.\n\t\tindent = space;\n\t}\n\n\t// If there is a replacer, it must be a function or an array. Otherwise, throw an error.\n\trep = replacer;\n\tif (\n\t\treplacer\n\t\t&& typeof replacer !== 'function'\n\t\t&& (typeof replacer !== 'object' || typeof replacer.length !== 'number')\n\t) {\n\t\tthrow new Error('JSON.stringify');\n\t}\n\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\treturn str('', { '': value });\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/jsonify/lib/stringify.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}}],"sources":{"node_modules/jsonify/lib/stringify.js":"'use strict';\n\nvar escapable = /[\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = { // table of character substitutions\n\t'\\b': '\\\\b',\n\t'\\t': '\\\\t',\n\t'\\n': '\\\\n',\n\t'\\f': '\\\\f',\n\t'\\r': '\\\\r',\n\t'\"': '\\\\\"',\n\t'\\\\': '\\\\\\\\'\n};\nvar rep;\n\nfunction quote(string) {\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape sequences.\n\n\tescapable.lastIndex = 0;\n\treturn escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t\tvar c = meta[a];\n\t\treturn typeof c === 'string' ? c\n\t\t\t: '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t}) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n\t// Produce a string from holder[key].\n\tvar i; // The loop counter.\n\tvar k; // The member key.\n\tvar v; // The member value.\n\tvar length;\n\tvar mind = gap;\n\tvar partial;\n\tvar value = holder[key];\n\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\tif (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n\t\tvalue = value.toJSON(key);\n\t}\n\n\t// If we were called with a replacer function, then call the replacer to obtain a replacement value.\n\tif (typeof rep === 'function') {\n\t\tvalue = rep.call(holder, key, value);\n\t}\n\n\t// What happens next depends on the value's type.\n\tswitch (typeof value) {\n\t\tcase 'string':\n\t\t\treturn quote(value);\n\n\t\tcase 'number':\n\t\t\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\t\treturn isFinite(value) ? String(value) : 'null';\n\n\t\tcase 'boolean':\n\t\tcase 'null':\n\t\t\t// If the value is a boolean or null, convert it to a string. Note:\n\t\t\t// typeof null does not produce 'null'. The case is included here in\n\t\t\t// the remote chance that this gets fixed someday.\n\t\t\treturn String(value);\n\n\t\tcase 'object':\n\t\t\tif (!value) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tgap += indent;\n\t\t\tpartial = [];\n\n\t\t\t// Array.isArray\n\t\t\tif (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\t\t\tlength = value.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tpartial[i] = str(i, value) || 'null';\n\t\t\t\t}\n\n\t\t\t\t// Join all of the elements together, separated with commas, and wrap them in brackets.\n\t\t\t\tv = partial.length === 0 ? '[]' : gap\n\t\t\t\t\t? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n\t\t\t\t\t: '[' + partial.join(',') + ']';\n\t\t\t\tgap = mind;\n\t\t\t\treturn v;\n\t\t\t}\n\n\t\t\t// If the replacer is an array, use it to select the members to be stringified.\n\t\t\tif (rep && typeof rep === 'object') {\n\t\t\t\tlength = rep.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tk = rep[i];\n\t\t\t\t\tif (typeof k === 'string') {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise, iterate through all of the keys in the object.\n\t\t\t\tfor (k in value) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, k)) {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Join all of the member texts together, separated with commas, and wrap them in braces.\n\n\t\t\tv = partial.length === 0 ? '{}' : gap\n\t\t\t\t? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n\t\t\t\t: '{' + partial.join(',') + '}';\n\t\t\tgap = mind;\n\t\t\treturn v;\n\t\tdefault:\n\t}\n}\n\nmodule.exports = function (value, replacer, space) {\n\tvar i;\n\tgap = '';\n\tindent = '';\n\n\t// If the space parameter is a number, make an indent string containing that many spaces.\n\tif (typeof space === 'number') {\n\t\tfor (i = 0; i < space; i += 1) {\n\t\t\tindent += ' ';\n\t\t}\n\t} else if (typeof space === 'string') {\n\t\t// If the space parameter is a string, it will be used as the indent string.\n\t\tindent = space;\n\t}\n\n\t// If there is a replacer, it must be a function or an array. Otherwise, throw an error.\n\trep = replacer;\n\tif (\n\t\treplacer\n\t\t&& typeof replacer !== 'function'\n\t\t&& (typeof replacer !== 'object' || typeof replacer.length !== 'number')\n\t) {\n\t\tthrow new Error('JSON.stringify');\n\t}\n\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\treturn str('', { '': value });\n};\n"},"lineCount":152}},"error":null,"hash":"66d0359bb4814e1da813c5d952b76439","cacheData":{"env":{}}}