{"id":"node_modules/ethereum-provider/index.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/ethereum-provider/package.json","includedInParent":true,"mtime":1682941420065},{"name":"events","loc":{"line":1,"column":29,"index":29},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/ethereum-provider/index.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/events/events.js"}],"generated":{"js":"const EventEmitter = require('events')\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => this.emit('close'))\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Latest EIP-1193\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription()\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription()\n      }\n    })\n  }\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n  _send (method, params = []) {\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.')\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.')\n    const payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n    const promise = new Promise((resolve, reject) => { this.promises[payload.id] = { resolve, reject } })\n    this.connection.send(payload)\n    return promise\n  }\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      let result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n  close () {\n    this.connection.close()\n    this.connected = false\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`)\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n}\n\nmodule.exports = EthereumProvider\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ethereum-provider/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/ethereum-provider/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}}],"sources":{"node_modules/ethereum-provider/index.js":"const EventEmitter = require('events')\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => this.emit('close'))\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Latest EIP-1193\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription()\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription()\n      }\n    })\n  }\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n  _send (method, params = []) {\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.')\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.')\n    const payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n    const promise = new Promise((resolve, reject) => { this.promises[payload.id] = { resolve, reject } })\n    this.connection.send(payload)\n    return promise\n  }\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      let result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n  close () {\n    this.connection.close()\n    this.connected = false\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`)\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n}\n\nmodule.exports = EthereumProvider\n"},"lineCount":145}},"error":null,"hash":"51320b30b3f2137582cc79a2adc596b4","cacheData":{"env":{}}}