{"id":"node_modules/jsonschema/lib/attribute.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/jsonschema/package.json","includedInParent":true,"mtime":1682941442049},{"name":"./helpers","loc":{"line":3,"column":22,"index":37},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/jsonschema/lib/attribute.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/jsonschema/lib/helpers.js"}],"generated":{"js":"'use strict';\n\nvar helpers = require('./helpers');\n\n/** @type ValidatorResult */\nvar ValidatorResult = helpers.ValidatorResult;\n/** @type SchemaError */\nvar SchemaError = helpers.SchemaError;\n\nvar attribute = {};\n\nattribute.ignoreProperties = {\n  // informative properties\n  'id': true,\n  'default': true,\n  'description': true,\n  'title': true,\n  // arguments to other properties\n  'additionalItems': true,\n  'then': true,\n  'else': true,\n  // special-handled properties\n  '$schema': true,\n  '$ref': true,\n  'extends': true,\n};\n\n/**\n * @name validators\n */\nvar validators = attribute.validators = {};\n\n/**\n * Validates whether the instance if of a certain type\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.type = function validateType (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var types = Array.isArray(schema.type) ? schema.type : [schema.type];\n  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {\n    var list = types.map(function (v) {\n      if(!v) return;\n      var id = v.$id || v.id;\n      return id ? ('<' + id + '>') : (v+'');\n    });\n    result.addError({\n      name: 'type',\n      argument: list,\n      message: \"is not of a type(s) \" + list,\n    });\n  }\n  return result;\n};\n\nfunction testSchemaNoThrow(instance, options, ctx, callback, schema){\n  var throwError = options.throwError;\n  var throwAll = options.throwAll;\n  options.throwError = false;\n  options.throwAll = false;\n  var res = this.validateSchema(instance, schema, options, ctx);\n  options.throwError = throwError;\n  options.throwAll = throwAll;\n\n  if (!res.valid && callback instanceof Function) {\n    callback(res);\n  }\n  return res.valid;\n}\n\n/**\n * Validates whether the instance matches some of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.anyOf = function validateAnyOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  if (!Array.isArray(schema.anyOf)){\n    throw new SchemaError(\"anyOf must be an array\");\n  }\n  if (!schema.anyOf.some(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res){inner.importErrors(res);}\n    ))) {\n    var list = schema.anyOf.map(function (v, i) {\n      var id = v.$id || v.id;\n      if(id) return '<' + id + '>';\n      return(v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n    });\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'anyOf',\n      argument: list,\n      message: \"is not any of \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance matches every given schema\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.allOf = function validateAllOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.allOf)){\n    throw new SchemaError(\"allOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var self = this;\n  schema.allOf.forEach(function(v, i){\n    var valid = self.validateSchema(instance, v, options, ctx);\n    if(!valid.valid){\n      var id = v.$id || v.id;\n      var msg = id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n      result.addError({\n        name: 'allOf',\n        argument: { id: msg, length: valid.errors.length, valid: valid },\n        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:',\n      });\n      result.importErrors(valid);\n    }\n  });\n  return result;\n};\n\n/**\n * Validates whether the instance matches exactly one of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.oneOf = function validateOneOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.oneOf)){\n    throw new SchemaError(\"oneOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  var count = schema.oneOf.filter(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res) {inner.importErrors(res);}\n    ) ).length;\n  var list = schema.oneOf.map(function (v, i) {\n    var id = v.$id || v.id;\n    return id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n  });\n  if (count!==1) {\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'oneOf',\n      argument: list,\n      message: \"is not exactly one from \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates \"then\" or \"else\" depending on the result of validating \"if\"\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.if = function validateIf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) return null;\n  if (!helpers.isSchema(schema.if)) throw new Error('Expected \"if\" keyword to be a schema');\n  var ifValid = testSchemaNoThrow.call(this, instance, options, ctx, null, schema.if);\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var res;\n  if(ifValid){\n    if (schema.then === undefined) return;\n    if (!helpers.isSchema(schema.then)) throw new Error('Expected \"then\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.then, options, ctx.makeChild(schema.then));\n    result.importErrors(res);\n  }else{\n    if (schema.else === undefined) return;\n    if (!helpers.isSchema(schema.else)) throw new Error('Expected \"else\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.else, options, ctx.makeChild(schema.else));\n    result.importErrors(res);\n  }\n  return result;\n};\n\nfunction getEnumerableProperty(object, key){\n  // Determine if `key` shows up in `for(var key in object)`\n  // First test Object.hasOwnProperty.call as an optimization: that guarantees it does\n  if(Object.hasOwnProperty.call(object, key)) return object[key];\n  // Test `key in object` as an optimization; false means it won't\n  if(!(key in object)) return;\n  while( (object = Object.getPrototypeOf(object)) ){\n    if(Object.propertyIsEnumerable.call(object, key)) return object[key];\n  }\n}\n\n/**\n * Validates propertyNames\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.propertyNames = function validatePropertyNames (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var subschema = schema.propertyNames!==undefined ? schema.propertyNames : {};\n  if(!helpers.isSchema(subschema)) throw new SchemaError('Expected \"propertyNames\" to be a schema (object or boolean)');\n\n  for (var property in instance) {\n    if(getEnumerableProperty(instance, property) !== undefined){\n      var res = this.validateSchema(property, subschema, options, ctx.makeChild(subschema));\n      result.importErrors(res);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates properties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.properties = function validateProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var properties = schema.properties || {};\n  for (var property in properties) {\n    var subschema = properties[property];\n    if(subschema===undefined){\n      continue;\n    }else if(subschema===null){\n      throw new SchemaError('Unexpected null, expected schema in \"properties\"');\n    }\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, subschema, options, ctx);\n    }\n    var prop = getEnumerableProperty(instance, property);\n    var res = this.validateSchema(prop, subschema, options, ctx.makeChild(subschema, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n  return result;\n};\n\n/**\n * Test a specific property within in instance against the additionalProperties schema attribute\n * This ignores properties with definitions in the properties schema attribute, but no other attributes.\n * If too many more types of property-existence tests pop up they may need their own class of tests (like `type` has)\n * @private\n * @return {boolean}\n */\nfunction testAdditionalProperty (instance, schema, options, ctx, property, result) {\n  if(!this.types.object(instance)) return;\n  if (schema.properties && schema.properties[property] !== undefined) {\n    return;\n  }\n  if (schema.additionalProperties === false) {\n    result.addError({\n      name: 'additionalProperties',\n      argument: property,\n      message: \"is not allowed to have the additional property \" + JSON.stringify(property),\n    });\n  } else {\n    var additionalProperties = schema.additionalProperties || {};\n\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, additionalProperties, options, ctx);\n    }\n\n    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n}\n\n/**\n * Validates patternProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.patternProperties = function validatePatternProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var patternProperties = schema.patternProperties || {};\n\n  for (var property in instance) {\n    var test = true;\n    for (var pattern in patternProperties) {\n      var subschema = patternProperties[pattern];\n      if(subschema===undefined){\n        continue;\n      }else if(subschema===null){\n        throw new SchemaError('Unexpected null, expected schema in \"patternProperties\"');\n      }\n      try {\n        var regexp = new RegExp(pattern, 'u');\n      } catch(_e) {\n        // In the event the stricter handling causes an error, fall back on the forgiving handling\n        // DEPRECATED\n        regexp = new RegExp(pattern);\n      }\n      if (!regexp.test(property)) {\n        continue;\n      }\n      test = false;\n\n      if (typeof options.preValidateProperty == 'function') {\n        options.preValidateProperty(instance, property, subschema, options, ctx);\n      }\n\n      var res = this.validateSchema(instance[property], subschema, options, ctx.makeChild(subschema, property));\n      if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n      result.importErrors(res);\n    }\n    if (test) {\n      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates additionalProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.additionalProperties = function validateAdditionalProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  // if patternProperties is defined then we'll test when that one is called instead\n  if (schema.patternProperties) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in instance) {\n    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minProperties = function validateMinProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length >= schema.minProperties)) {\n    result.addError({\n      name: 'minProperties',\n      argument: schema.minProperties,\n      message: \"does not meet minimum property length of \" + schema.minProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxProperties = function validateMaxProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length <= schema.maxProperties)) {\n    result.addError({\n      name: 'maxProperties',\n      argument: schema.maxProperties,\n      message: \"does not meet maximum property length of \" + schema.maxProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates items when instance is an array\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.items = function validateItems (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.items===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  instance.every(function (value, i) {\n    if(Array.isArray(schema.items)){\n      var items =  schema.items[i]===undefined ? schema.additionalItems : schema.items[i];\n    }else{\n      var items = schema.items;\n    }\n    if (items === undefined) {\n      return true;\n    }\n    if (items === false) {\n      result.addError({\n        name: 'items',\n        message: \"additionalItems not permitted\",\n      });\n      return false;\n    }\n    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));\n    if(res.instance !== result.instance[i]) result.instance[i] = res.instance;\n    result.importErrors(res);\n    return true;\n  });\n  return result;\n};\n\n/**\n * Validates the \"contains\" keyword\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.contains = function validateContains (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.contains===undefined) return;\n  if (!helpers.isSchema(schema.contains)) throw new Error('Expected \"contains\" keyword to be a schema');\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var count = instance.some(function (value, i) {\n    var res = self.validateSchema(value, schema.contains, options, ctx.makeChild(schema.contains, i));\n    return res.errors.length===0;\n  });\n  if(count===false){\n    result.addError({\n      name: 'contains',\n      argument: schema.contains,\n      message: \"must contain an item matching given schema\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates minimum and exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minimum = function validateMinimum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {\n    if(!(instance > schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than \" + schema.minimum,\n      });\n    }\n  } else {\n    if(!(instance >= schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than or equal to \" + schema.minimum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates maximum and exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maximum = function validateMaximum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {\n    if(!(instance < schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than \" + schema.maximum,\n      });\n    }\n  } else {\n    if(!(instance <= schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than or equal to \" + schema.maximum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMinimum = function validateExclusiveMinimum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMinimum, which is handled by the \"minimum\" keyword.\n  if(typeof schema.exclusiveMinimum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance > schema.exclusiveMinimum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMinimum',\n      argument: schema.exclusiveMinimum,\n      message: \"must be strictly greater than \" + schema.exclusiveMinimum,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMaximum = function validateExclusiveMaximum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMaximum, which is handled by the \"maximum\" keyword.\n  if(typeof schema.exclusiveMaximum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance < schema.exclusiveMaximum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMaximum',\n      argument: schema.exclusiveMaximum,\n      message: \"must be strictly less than \" + schema.exclusiveMaximum,\n    });\n  }\n  return result;\n};\n\n/**\n * Perform validation for multipleOf and divisibleBy, which are essentially the same.\n * @param instance\n * @param schema\n * @param validationType\n * @param errorMessage\n * @returns {String|null}\n */\nvar validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy (instance, schema, options, ctx, validationType, errorMessage) {\n  if (!this.types.number(instance)) return;\n\n  var validationArgument = schema[validationType];\n  if (validationArgument == 0) {\n    throw new SchemaError(validationType + \" cannot be zero\");\n  }\n\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n  var instanceDecimals = helpers.getDecimalPlaces(instance);\n  var divisorDecimals = helpers.getDecimalPlaces(validationArgument);\n\n  var maxDecimals = Math.max(instanceDecimals , divisorDecimals);\n  var multiplier = Math.pow(10, maxDecimals);\n\n  if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {\n    result.addError({\n      name: validationType,\n      argument:  validationArgument,\n      message: errorMessage + JSON.stringify(validationArgument),\n    });\n  }\n\n  return result;\n};\n\n/**\n * Validates divisibleBy when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.multipleOf = function validateMultipleOf (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"multipleOf\", \"is not a multiple of (divisible by) \");\n};\n\n/**\n * Validates multipleOf when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.divisibleBy = function validateDivisibleBy (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"divisibleBy\", \"is not divisible by (multiple of) \");\n};\n\n/**\n * Validates whether the instance value is present.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.required = function validateRequired (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (instance === undefined && schema.required === true) {\n    // A boolean form is implemented for reverse-compatibility with schemas written against older drafts\n    result.addError({\n      name: 'required',\n      message: \"is required\",\n    });\n  } else if (this.types.object(instance) && Array.isArray(schema.required)) {\n    schema.required.forEach(function(n){\n      if(getEnumerableProperty(instance, n)===undefined){\n        result.addError({\n          name: 'required',\n          argument: n,\n          message: \"requires property \" + JSON.stringify(n),\n        });\n      }\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value matches the regular expression, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.pattern = function validatePattern (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var pattern = schema.pattern;\n  try {\n    var regexp = new RegExp(pattern, 'u');\n  } catch(_e) {\n    // In the event the stricter handling causes an error, fall back on the forgiving handling\n    // DEPRECATED\n    regexp = new RegExp(pattern);\n  }\n  if (!instance.match(regexp)) {\n    result.addError({\n      name: 'pattern',\n      argument: schema.pattern,\n      message: \"does not match pattern \" + JSON.stringify(schema.pattern.toString()),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is of a certain defined format or a custom\n * format.\n * The following formats are supported for string types:\n *   - date-time\n *   - date\n *   - time\n *   - ip-address\n *   - ipv6\n *   - uri\n *   - color\n *   - host-name\n *   - alpha\n *   - alpha-numeric\n *   - utc-millisec\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {String|null}\n */\nvalidators.format = function validateFormat (instance, schema, options, ctx) {\n  if (instance===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {\n    result.addError({\n      name: 'format',\n      argument: schema.format,\n      message: \"does not conform to the \" + JSON.stringify(schema.format) + \" format\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minLength = function validateMinLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length >= schema.minLength)) {\n    result.addError({\n      name: 'minLength',\n      argument: schema.minLength,\n      message: \"does not meet minimum length of \" + schema.minLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxLength = function validateMaxLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  // TODO if this was already computed in \"minLength\", use that value instead of re-computing\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length <= schema.maxLength)) {\n    result.addError({\n      name: 'maxLength',\n      argument: schema.maxLength,\n      message: \"does not meet maximum length of \" + schema.maxLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains at least a minimum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minItems = function validateMinItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length >= schema.minItems)) {\n    result.addError({\n      name: 'minItems',\n      argument: schema.minItems,\n      message: \"does not meet minimum length of \" + schema.minItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxItems = function validateMaxItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length <= schema.maxItems)) {\n    result.addError({\n      name: 'maxItems',\n      argument: schema.maxItems,\n      message: \"does not meet maximum length of \" + schema.maxItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Deep compares arrays for duplicates\n * @param v\n * @param i\n * @param a\n * @private\n * @return {boolean}\n */\nfunction testArrays (v, i, a) {\n  var j, len = a.length;\n  for (j = i + 1, len; j < len; j++) {\n    if (helpers.deepCompareStrict(v, a[j])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Validates whether there are no duplicates, when the instance is an Array.\n * @param instance\n * @return {String|null}\n */\nvalidators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {\n  if (schema.uniqueItems!==true) return;\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!instance.every(testArrays)) {\n    result.addError({\n      name: 'uniqueItems',\n      message: \"contains duplicate item\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validate for the presence of dependency properties, if the instance is an object.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.dependencies = function validateDependencies (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in schema.dependencies) {\n    if (instance[property] === undefined) {\n      continue;\n    }\n    var dep = schema.dependencies[property];\n    var childContext = ctx.makeChild(dep, property);\n    if (typeof dep == 'string') {\n      dep = [dep];\n    }\n    if (Array.isArray(dep)) {\n      dep.forEach(function (prop) {\n        if (instance[prop] === undefined) {\n          result.addError({\n            // FIXME there's two different \"dependencies\" errors here with slightly different outputs\n            // Can we make these the same? Or should we create different error types?\n            name: 'dependencies',\n            argument: childContext.propertyPath,\n            message: \"property \" + prop + \" not found, required by \" + childContext.propertyPath,\n          });\n        }\n      });\n    } else {\n      var res = this.validateSchema(instance, dep, options, childContext);\n      if(result.instance !== res.instance) result.instance = res.instance;\n      if (res && res.errors.length) {\n        result.addError({\n          name: 'dependencies',\n          argument: childContext.propertyPath,\n          message: \"does not meet dependency required by \" + childContext.propertyPath,\n        });\n        result.importErrors(res);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is one of the enumerated values.\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['enum'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema['enum'])) {\n    throw new SchemaError(\"enum expects an array\", schema);\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {\n    result.addError({\n      name: 'enum',\n      argument: schema['enum'],\n      message: \"is not one of enum values: \" + schema['enum'].map(String).join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance exactly matches a given value\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['const'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!helpers.deepCompareStrict(schema['const'], instance)) {\n    result.addError({\n      name: 'const',\n      argument: schema['const'],\n      message: \"does not exactly match expected constant: \" + schema['const'],\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance if of a prohibited type.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.not = validators.disallow = function validateNot (instance, schema, options, ctx) {\n  var self = this;\n  if(instance===undefined) return null;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var notTypes = schema.not || schema.disallow;\n  if(!notTypes) return null;\n  if(!Array.isArray(notTypes)) notTypes=[notTypes];\n  notTypes.forEach(function (type) {\n    if (self.testType(instance, schema, options, ctx, type)) {\n      var id = type && (type.$id || type.id);\n      var schemaId = id || type;\n      result.addError({\n        name: 'not',\n        argument: schemaId,\n        message: \"is of prohibited type \" + schemaId,\n      });\n    }\n  });\n  return result;\n};\n\nmodule.exports = attribute;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"node_modules/jsonschema/lib/attribute.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}}],"sources":{"node_modules/jsonschema/lib/attribute.js":"'use strict';\n\nvar helpers = require('./helpers');\n\n/** @type ValidatorResult */\nvar ValidatorResult = helpers.ValidatorResult;\n/** @type SchemaError */\nvar SchemaError = helpers.SchemaError;\n\nvar attribute = {};\n\nattribute.ignoreProperties = {\n  // informative properties\n  'id': true,\n  'default': true,\n  'description': true,\n  'title': true,\n  // arguments to other properties\n  'additionalItems': true,\n  'then': true,\n  'else': true,\n  // special-handled properties\n  '$schema': true,\n  '$ref': true,\n  'extends': true,\n};\n\n/**\n * @name validators\n */\nvar validators = attribute.validators = {};\n\n/**\n * Validates whether the instance if of a certain type\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.type = function validateType (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var types = Array.isArray(schema.type) ? schema.type : [schema.type];\n  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {\n    var list = types.map(function (v) {\n      if(!v) return;\n      var id = v.$id || v.id;\n      return id ? ('<' + id + '>') : (v+'');\n    });\n    result.addError({\n      name: 'type',\n      argument: list,\n      message: \"is not of a type(s) \" + list,\n    });\n  }\n  return result;\n};\n\nfunction testSchemaNoThrow(instance, options, ctx, callback, schema){\n  var throwError = options.throwError;\n  var throwAll = options.throwAll;\n  options.throwError = false;\n  options.throwAll = false;\n  var res = this.validateSchema(instance, schema, options, ctx);\n  options.throwError = throwError;\n  options.throwAll = throwAll;\n\n  if (!res.valid && callback instanceof Function) {\n    callback(res);\n  }\n  return res.valid;\n}\n\n/**\n * Validates whether the instance matches some of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.anyOf = function validateAnyOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  if (!Array.isArray(schema.anyOf)){\n    throw new SchemaError(\"anyOf must be an array\");\n  }\n  if (!schema.anyOf.some(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res){inner.importErrors(res);}\n    ))) {\n    var list = schema.anyOf.map(function (v, i) {\n      var id = v.$id || v.id;\n      if(id) return '<' + id + '>';\n      return(v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n    });\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'anyOf',\n      argument: list,\n      message: \"is not any of \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance matches every given schema\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.allOf = function validateAllOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.allOf)){\n    throw new SchemaError(\"allOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var self = this;\n  schema.allOf.forEach(function(v, i){\n    var valid = self.validateSchema(instance, v, options, ctx);\n    if(!valid.valid){\n      var id = v.$id || v.id;\n      var msg = id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n      result.addError({\n        name: 'allOf',\n        argument: { id: msg, length: valid.errors.length, valid: valid },\n        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:',\n      });\n      result.importErrors(valid);\n    }\n  });\n  return result;\n};\n\n/**\n * Validates whether the instance matches exactly one of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.oneOf = function validateOneOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.oneOf)){\n    throw new SchemaError(\"oneOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  var count = schema.oneOf.filter(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res) {inner.importErrors(res);}\n    ) ).length;\n  var list = schema.oneOf.map(function (v, i) {\n    var id = v.$id || v.id;\n    return id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n  });\n  if (count!==1) {\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'oneOf',\n      argument: list,\n      message: \"is not exactly one from \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates \"then\" or \"else\" depending on the result of validating \"if\"\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.if = function validateIf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) return null;\n  if (!helpers.isSchema(schema.if)) throw new Error('Expected \"if\" keyword to be a schema');\n  var ifValid = testSchemaNoThrow.call(this, instance, options, ctx, null, schema.if);\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var res;\n  if(ifValid){\n    if (schema.then === undefined) return;\n    if (!helpers.isSchema(schema.then)) throw new Error('Expected \"then\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.then, options, ctx.makeChild(schema.then));\n    result.importErrors(res);\n  }else{\n    if (schema.else === undefined) return;\n    if (!helpers.isSchema(schema.else)) throw new Error('Expected \"else\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.else, options, ctx.makeChild(schema.else));\n    result.importErrors(res);\n  }\n  return result;\n};\n\nfunction getEnumerableProperty(object, key){\n  // Determine if `key` shows up in `for(var key in object)`\n  // First test Object.hasOwnProperty.call as an optimization: that guarantees it does\n  if(Object.hasOwnProperty.call(object, key)) return object[key];\n  // Test `key in object` as an optimization; false means it won't\n  if(!(key in object)) return;\n  while( (object = Object.getPrototypeOf(object)) ){\n    if(Object.propertyIsEnumerable.call(object, key)) return object[key];\n  }\n}\n\n/**\n * Validates propertyNames\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.propertyNames = function validatePropertyNames (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var subschema = schema.propertyNames!==undefined ? schema.propertyNames : {};\n  if(!helpers.isSchema(subschema)) throw new SchemaError('Expected \"propertyNames\" to be a schema (object or boolean)');\n\n  for (var property in instance) {\n    if(getEnumerableProperty(instance, property) !== undefined){\n      var res = this.validateSchema(property, subschema, options, ctx.makeChild(subschema));\n      result.importErrors(res);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates properties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.properties = function validateProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var properties = schema.properties || {};\n  for (var property in properties) {\n    var subschema = properties[property];\n    if(subschema===undefined){\n      continue;\n    }else if(subschema===null){\n      throw new SchemaError('Unexpected null, expected schema in \"properties\"');\n    }\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, subschema, options, ctx);\n    }\n    var prop = getEnumerableProperty(instance, property);\n    var res = this.validateSchema(prop, subschema, options, ctx.makeChild(subschema, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n  return result;\n};\n\n/**\n * Test a specific property within in instance against the additionalProperties schema attribute\n * This ignores properties with definitions in the properties schema attribute, but no other attributes.\n * If too many more types of property-existence tests pop up they may need their own class of tests (like `type` has)\n * @private\n * @return {boolean}\n */\nfunction testAdditionalProperty (instance, schema, options, ctx, property, result) {\n  if(!this.types.object(instance)) return;\n  if (schema.properties && schema.properties[property] !== undefined) {\n    return;\n  }\n  if (schema.additionalProperties === false) {\n    result.addError({\n      name: 'additionalProperties',\n      argument: property,\n      message: \"is not allowed to have the additional property \" + JSON.stringify(property),\n    });\n  } else {\n    var additionalProperties = schema.additionalProperties || {};\n\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, additionalProperties, options, ctx);\n    }\n\n    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n}\n\n/**\n * Validates patternProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.patternProperties = function validatePatternProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var patternProperties = schema.patternProperties || {};\n\n  for (var property in instance) {\n    var test = true;\n    for (var pattern in patternProperties) {\n      var subschema = patternProperties[pattern];\n      if(subschema===undefined){\n        continue;\n      }else if(subschema===null){\n        throw new SchemaError('Unexpected null, expected schema in \"patternProperties\"');\n      }\n      try {\n        var regexp = new RegExp(pattern, 'u');\n      } catch(_e) {\n        // In the event the stricter handling causes an error, fall back on the forgiving handling\n        // DEPRECATED\n        regexp = new RegExp(pattern);\n      }\n      if (!regexp.test(property)) {\n        continue;\n      }\n      test = false;\n\n      if (typeof options.preValidateProperty == 'function') {\n        options.preValidateProperty(instance, property, subschema, options, ctx);\n      }\n\n      var res = this.validateSchema(instance[property], subschema, options, ctx.makeChild(subschema, property));\n      if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n      result.importErrors(res);\n    }\n    if (test) {\n      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates additionalProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.additionalProperties = function validateAdditionalProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  // if patternProperties is defined then we'll test when that one is called instead\n  if (schema.patternProperties) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in instance) {\n    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minProperties = function validateMinProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length >= schema.minProperties)) {\n    result.addError({\n      name: 'minProperties',\n      argument: schema.minProperties,\n      message: \"does not meet minimum property length of \" + schema.minProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxProperties = function validateMaxProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length <= schema.maxProperties)) {\n    result.addError({\n      name: 'maxProperties',\n      argument: schema.maxProperties,\n      message: \"does not meet maximum property length of \" + schema.maxProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates items when instance is an array\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.items = function validateItems (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.items===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  instance.every(function (value, i) {\n    if(Array.isArray(schema.items)){\n      var items =  schema.items[i]===undefined ? schema.additionalItems : schema.items[i];\n    }else{\n      var items = schema.items;\n    }\n    if (items === undefined) {\n      return true;\n    }\n    if (items === false) {\n      result.addError({\n        name: 'items',\n        message: \"additionalItems not permitted\",\n      });\n      return false;\n    }\n    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));\n    if(res.instance !== result.instance[i]) result.instance[i] = res.instance;\n    result.importErrors(res);\n    return true;\n  });\n  return result;\n};\n\n/**\n * Validates the \"contains\" keyword\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.contains = function validateContains (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.contains===undefined) return;\n  if (!helpers.isSchema(schema.contains)) throw new Error('Expected \"contains\" keyword to be a schema');\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var count = instance.some(function (value, i) {\n    var res = self.validateSchema(value, schema.contains, options, ctx.makeChild(schema.contains, i));\n    return res.errors.length===0;\n  });\n  if(count===false){\n    result.addError({\n      name: 'contains',\n      argument: schema.contains,\n      message: \"must contain an item matching given schema\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates minimum and exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minimum = function validateMinimum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {\n    if(!(instance > schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than \" + schema.minimum,\n      });\n    }\n  } else {\n    if(!(instance >= schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than or equal to \" + schema.minimum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates maximum and exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maximum = function validateMaximum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {\n    if(!(instance < schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than \" + schema.maximum,\n      });\n    }\n  } else {\n    if(!(instance <= schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than or equal to \" + schema.maximum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMinimum = function validateExclusiveMinimum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMinimum, which is handled by the \"minimum\" keyword.\n  if(typeof schema.exclusiveMinimum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance > schema.exclusiveMinimum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMinimum',\n      argument: schema.exclusiveMinimum,\n      message: \"must be strictly greater than \" + schema.exclusiveMinimum,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMaximum = function validateExclusiveMaximum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMaximum, which is handled by the \"maximum\" keyword.\n  if(typeof schema.exclusiveMaximum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance < schema.exclusiveMaximum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMaximum',\n      argument: schema.exclusiveMaximum,\n      message: \"must be strictly less than \" + schema.exclusiveMaximum,\n    });\n  }\n  return result;\n};\n\n/**\n * Perform validation for multipleOf and divisibleBy, which are essentially the same.\n * @param instance\n * @param schema\n * @param validationType\n * @param errorMessage\n * @returns {String|null}\n */\nvar validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy (instance, schema, options, ctx, validationType, errorMessage) {\n  if (!this.types.number(instance)) return;\n\n  var validationArgument = schema[validationType];\n  if (validationArgument == 0) {\n    throw new SchemaError(validationType + \" cannot be zero\");\n  }\n\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n  var instanceDecimals = helpers.getDecimalPlaces(instance);\n  var divisorDecimals = helpers.getDecimalPlaces(validationArgument);\n\n  var maxDecimals = Math.max(instanceDecimals , divisorDecimals);\n  var multiplier = Math.pow(10, maxDecimals);\n\n  if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {\n    result.addError({\n      name: validationType,\n      argument:  validationArgument,\n      message: errorMessage + JSON.stringify(validationArgument),\n    });\n  }\n\n  return result;\n};\n\n/**\n * Validates divisibleBy when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.multipleOf = function validateMultipleOf (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"multipleOf\", \"is not a multiple of (divisible by) \");\n};\n\n/**\n * Validates multipleOf when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.divisibleBy = function validateDivisibleBy (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"divisibleBy\", \"is not divisible by (multiple of) \");\n};\n\n/**\n * Validates whether the instance value is present.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.required = function validateRequired (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (instance === undefined && schema.required === true) {\n    // A boolean form is implemented for reverse-compatibility with schemas written against older drafts\n    result.addError({\n      name: 'required',\n      message: \"is required\",\n    });\n  } else if (this.types.object(instance) && Array.isArray(schema.required)) {\n    schema.required.forEach(function(n){\n      if(getEnumerableProperty(instance, n)===undefined){\n        result.addError({\n          name: 'required',\n          argument: n,\n          message: \"requires property \" + JSON.stringify(n),\n        });\n      }\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value matches the regular expression, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.pattern = function validatePattern (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var pattern = schema.pattern;\n  try {\n    var regexp = new RegExp(pattern, 'u');\n  } catch(_e) {\n    // In the event the stricter handling causes an error, fall back on the forgiving handling\n    // DEPRECATED\n    regexp = new RegExp(pattern);\n  }\n  if (!instance.match(regexp)) {\n    result.addError({\n      name: 'pattern',\n      argument: schema.pattern,\n      message: \"does not match pattern \" + JSON.stringify(schema.pattern.toString()),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is of a certain defined format or a custom\n * format.\n * The following formats are supported for string types:\n *   - date-time\n *   - date\n *   - time\n *   - ip-address\n *   - ipv6\n *   - uri\n *   - color\n *   - host-name\n *   - alpha\n *   - alpha-numeric\n *   - utc-millisec\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {String|null}\n */\nvalidators.format = function validateFormat (instance, schema, options, ctx) {\n  if (instance===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {\n    result.addError({\n      name: 'format',\n      argument: schema.format,\n      message: \"does not conform to the \" + JSON.stringify(schema.format) + \" format\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minLength = function validateMinLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length >= schema.minLength)) {\n    result.addError({\n      name: 'minLength',\n      argument: schema.minLength,\n      message: \"does not meet minimum length of \" + schema.minLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxLength = function validateMaxLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  // TODO if this was already computed in \"minLength\", use that value instead of re-computing\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length <= schema.maxLength)) {\n    result.addError({\n      name: 'maxLength',\n      argument: schema.maxLength,\n      message: \"does not meet maximum length of \" + schema.maxLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains at least a minimum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minItems = function validateMinItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length >= schema.minItems)) {\n    result.addError({\n      name: 'minItems',\n      argument: schema.minItems,\n      message: \"does not meet minimum length of \" + schema.minItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxItems = function validateMaxItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length <= schema.maxItems)) {\n    result.addError({\n      name: 'maxItems',\n      argument: schema.maxItems,\n      message: \"does not meet maximum length of \" + schema.maxItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Deep compares arrays for duplicates\n * @param v\n * @param i\n * @param a\n * @private\n * @return {boolean}\n */\nfunction testArrays (v, i, a) {\n  var j, len = a.length;\n  for (j = i + 1, len; j < len; j++) {\n    if (helpers.deepCompareStrict(v, a[j])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Validates whether there are no duplicates, when the instance is an Array.\n * @param instance\n * @return {String|null}\n */\nvalidators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {\n  if (schema.uniqueItems!==true) return;\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!instance.every(testArrays)) {\n    result.addError({\n      name: 'uniqueItems',\n      message: \"contains duplicate item\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validate for the presence of dependency properties, if the instance is an object.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.dependencies = function validateDependencies (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in schema.dependencies) {\n    if (instance[property] === undefined) {\n      continue;\n    }\n    var dep = schema.dependencies[property];\n    var childContext = ctx.makeChild(dep, property);\n    if (typeof dep == 'string') {\n      dep = [dep];\n    }\n    if (Array.isArray(dep)) {\n      dep.forEach(function (prop) {\n        if (instance[prop] === undefined) {\n          result.addError({\n            // FIXME there's two different \"dependencies\" errors here with slightly different outputs\n            // Can we make these the same? Or should we create different error types?\n            name: 'dependencies',\n            argument: childContext.propertyPath,\n            message: \"property \" + prop + \" not found, required by \" + childContext.propertyPath,\n          });\n        }\n      });\n    } else {\n      var res = this.validateSchema(instance, dep, options, childContext);\n      if(result.instance !== res.instance) result.instance = res.instance;\n      if (res && res.errors.length) {\n        result.addError({\n          name: 'dependencies',\n          argument: childContext.propertyPath,\n          message: \"does not meet dependency required by \" + childContext.propertyPath,\n        });\n        result.importErrors(res);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is one of the enumerated values.\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['enum'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema['enum'])) {\n    throw new SchemaError(\"enum expects an array\", schema);\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {\n    result.addError({\n      name: 'enum',\n      argument: schema['enum'],\n      message: \"is not one of enum values: \" + schema['enum'].map(String).join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance exactly matches a given value\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['const'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!helpers.deepCompareStrict(schema['const'], instance)) {\n    result.addError({\n      name: 'const',\n      argument: schema['const'],\n      message: \"does not exactly match expected constant: \" + schema['const'],\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance if of a prohibited type.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.not = validators.disallow = function validateNot (instance, schema, options, ctx) {\n  var self = this;\n  if(instance===undefined) return null;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var notTypes = schema.not || schema.disallow;\n  if(!notTypes) return null;\n  if(!Array.isArray(notTypes)) notTypes=[notTypes];\n  notTypes.forEach(function (type) {\n    if (self.testType(instance, schema, options, ctx, type)) {\n      var id = type && (type.$id || type.id);\n      var schemaId = id || type;\n      result.addError({\n        name: 'not',\n        argument: schemaId,\n        message: \"is of prohibited type \" + schemaId,\n      });\n    }\n  });\n  return result;\n};\n\nmodule.exports = attribute;\n"},"lineCount":979}},"error":null,"hash":"b25f7cd288992ff609f4d1706ff7608e","cacheData":{"env":{}}}