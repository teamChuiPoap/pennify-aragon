{"id":"node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js","dependencies":[{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js.map","includedInParent":true,"mtime":1682941429233},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/src/internal/operators/mergeMapTo.ts","includedInParent":true,"mtime":1682941429233},{"name":"/home/agevi/chui Organisation/pennify-aragon/package.json","includedInParent":true,"mtime":1682968105152},{"name":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/package.json","includedInParent":true,"mtime":1682941429233},{"name":"./mergeMap","loc":{"line":2,"column":25,"index":78},"parent":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js","resolved":"/home/agevi/chui Organisation/pennify-aragon/node_modules/rxjs/_esm5/internal/operators/mergeMap.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeMapTo = mergeMapTo;\nvar _mergeMap = require(\"./mergeMap\");\n/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */\n\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  if (typeof resultSelector === 'function') {\n    return (0, _mergeMap.mergeMap)(function () {\n      return innerObservable;\n    }, resultSelector, concurrent);\n  }\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (0, _mergeMap.mergeMap)(function () {\n    return innerObservable;\n  }, concurrent);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":52,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":10,"column":9}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":10,"column":19}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":10,"column":20}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":10,"column":35}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":10,"column":37}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":30},"generated":{"line":10,"column":51}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":30},"generated":{"line":10,"column":53}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":10,"column":63}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":10,"column":65}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":2},"generated":{"line":11,"column":2}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":6},"generated":{"line":11,"column":6}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":11,"column":16}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":11,"column":21}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":11,"column":26}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":27},"generated":{"line":11,"column":27}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":27},"generated":{"line":11,"column":29}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":4},"generated":{"line":12,"column":4}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":11},"generated":{"line":12,"column":14}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":11},"generated":{"line":12,"column":17}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":20},"generated":{"line":12,"column":23}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":20},"generated":{"line":12,"column":24}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":26},"generated":{"line":12,"column":41}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":14,"column":2}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":14,"column":6}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":13},"generated":{"line":14,"column":13}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":27},"generated":{"line":14,"column":27}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":32},"generated":{"line":14,"column":32}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":42},"generated":{"line":14,"column":42}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":42},"generated":{"line":14,"column":44}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":15,"column":4}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":15,"column":11}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":15,"column":15}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":15,"column":33}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":15,"column":35}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":15,"column":47}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":16,"column":6}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":16,"column":13}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":16,"column":28}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":17,"column":4}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":17,"column":5}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":17,"column":7}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":17,"column":21}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":17,"column":23}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":17,"column":33}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":17,"column":34}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":19,"column":2}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":19,"column":6}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":19,"column":13}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":18},"generated":{"line":19,"column":27}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":24},"generated":{"line":19,"column":32}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":24},"generated":{"line":19,"column":40}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":24},"generated":{"line":19,"column":42}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":20,"column":4}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":20,"column":14}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":20,"column":17}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":20,"column":31}}],"sources":{"../../../src/internal/operators/mergeMapTo.ts":"import { Observable } from '../Observable';\nimport { OperatorFunction, ObservedValueOf } from '../../internal/types';\nimport { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, O extends ObservableInput<any>>(innerObservable: O, concurrent?: number): OperatorFunction<any, ObservedValueOf<O>>;\n/** @deprecated */\nexport function mergeMapTo<T, R, O extends ObservableInput<any>>(innerObservable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * ![](mergeMapTo.png)\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * ## Example\n * For each click event, start an interval Observable ticking every 1 second\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { mergeMapTo } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(mergeMapTo(interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable`\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, R, O extends ObservableInput<any>>(\n  innerObservable: O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    return mergeMap(() => innerObservable, resultSelector, concurrent);\n  }\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return mergeMap(() => innerObservable, concurrent);\n}\n"},"lineCount":null}},"error":null,"hash":"fb09539b9a71709de79803bfe2389782","cacheData":{"env":{}}}